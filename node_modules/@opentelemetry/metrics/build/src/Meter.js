"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Meter = void 0;
const api = require("@opentelemetry/api");
const core_1 = require("@opentelemetry/core");
const resources_1 = require("@opentelemetry/resources");
const UpDownCounterMetric_1 = require("./UpDownCounterMetric");
const Metric_1 = require("./Metric");
const types_1 = require("./types");
const Batcher_1 = require("./export/Batcher");
const Controller_1 = require("./export/Controller");
const NoopExporter_1 = require("./export/NoopExporter");
/**
 * Meter is an implementation of the {@link Meter} interface.
 */
class Meter {
    /**
     * Constructs a new Meter instance.
     */
    constructor(config = types_1.DEFAULT_CONFIG) {
        var _a;
        this._metrics = new Map();
        this._logger = config.logger || new core_1.ConsoleLogger(config.logLevel);
        this._batcher = (_a = config.batcher) !== null && _a !== void 0 ? _a : new Batcher_1.UngroupedBatcher();
        this._resource = config.resource || resources_1.Resource.createTelemetrySDKResource();
        // start the push controller
        const exporter = config.exporter || new NoopExporter_1.NoopExporter();
        const interval = config.interval;
        new Controller_1.PushController(this, exporter, interval);
    }
    /**
     * Creates and returns a new {@link ValueRecorder}.
     * @param name the name of the metric.
     * @param [options] the metric options.
     */
    createValueRecorder(name, options) {
        if (!this._isValidName(name)) {
            this._logger.warn(`Invalid metric name ${name}. Defaulting to noop metric implementation.`);
            return api.NOOP_VALUE_RECORDER_METRIC;
        }
        const opt = Object.assign(Object.assign(Object.assign({ logger: this._logger }, types_1.DEFAULT_METRIC_OPTIONS), { absolute: true }), options);
        const valueRecorder = new Metric_1.ValueRecorderMetric(name, opt, this._batcher, this._resource);
        this._registerMetric(name, valueRecorder);
        return valueRecorder;
    }
    /**
     * Creates a new counter metric. Generally, this kind of metric when the
     * value is a quantity, the sum is of primary interest, and the event count
     * and value distribution are not of primary interest.
     * @param name the name of the metric.
     * @param [options] the metric options.
     */
    createCounter(name, options) {
        if (!this._isValidName(name)) {
            this._logger.warn(`Invalid metric name ${name}. Defaulting to noop metric implementation.`);
            return api.NOOP_COUNTER_METRIC;
        }
        const opt = Object.assign(Object.assign({ logger: this._logger }, types_1.DEFAULT_METRIC_OPTIONS), options);
        const counter = new Metric_1.CounterMetric(name, opt, this._batcher, this._resource);
        this._registerMetric(name, counter);
        return counter;
    }
    /**
     * Creates a new `UpDownCounter` metric. UpDownCounter is a synchronous
     * instrument and very similar to Counter except that Add(increment)
     * supports negative increments. It is generally useful for capturing changes
     * in an amount of resources used, or any quantity that rises and falls
     * during a request.
     *
     * @param name the name of the metric.
     * @param [options] the metric options.
     */
    createUpDownCounter(name, options) {
        if (!this._isValidName(name)) {
            this._logger.warn(`Invalid metric name ${name}. Defaulting to noop metric implementation.`);
            return api.NOOP_COUNTER_METRIC;
        }
        const opt = Object.assign(Object.assign({ logger: this._logger }, types_1.DEFAULT_METRIC_OPTIONS), options);
        const upDownCounter = new UpDownCounterMetric_1.UpDownCounterMetric(name, opt, this._batcher, this._resource);
        this._registerMetric(name, upDownCounter);
        return upDownCounter;
    }
    /**
     * Creates a new observer metric.
     * @param name the name of the metric.
     * @param [options] the metric options.
     */
    createObserver(name, options) {
        if (!this._isValidName(name)) {
            this._logger.warn(`Invalid metric name ${name}. Defaulting to noop metric implementation.`);
            return api.NOOP_OBSERVER_METRIC;
        }
        const opt = Object.assign(Object.assign({ logger: this._logger }, types_1.DEFAULT_METRIC_OPTIONS), options);
        const observer = new Metric_1.ObserverMetric(name, opt, this._batcher, this._resource);
        this._registerMetric(name, observer);
        return observer;
    }
    /**
     * Collects all the metrics created with this `Meter` for export.
     *
     * Utilizes the batcher to create checkpoints of the current values in
     * each aggregator belonging to the metrics that were created with this
     * meter instance.
     */
    collect() {
        Array.from(this._metrics.values()).forEach(metric => {
            metric.getMetricRecord().forEach(record => {
                this._batcher.process(record);
            });
        });
    }
    getBatcher() {
        return this._batcher;
    }
    /**
     * Registers metric to register.
     * @param name The name of the metric.
     * @param metric The metric to register.
     */
    _registerMetric(name, metric) {
        if (this._metrics.has(name)) {
            this._logger.error(`A metric with the name ${name} has already been registered.`);
            return;
        }
        this._metrics.set(name, metric);
    }
    /**
     * Ensure a metric name conforms to the following rules:
     *
     * 1. They are non-empty strings
     *
     * 2. The first character must be non-numeric, non-space, non-punctuation
     *
     * 3. Subsequent characters must be belong to the alphanumeric characters,
     *    '_', '.', and '-'.
     *
     * Names are case insensitive
     *
     * @param name Name of metric to be created
     */
    _isValidName(name) {
        return Boolean(name.match(/^[a-z][a-z0-9_.-]*$/i));
    }
}
exports.Meter = Meter;
//# sourceMappingURL=Meter.js.map