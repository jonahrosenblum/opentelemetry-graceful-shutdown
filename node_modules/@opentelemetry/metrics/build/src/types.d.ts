import { LogLevel } from '@opentelemetry/core';
import { Logger, ValueType } from '@opentelemetry/api';
import { MetricExporter } from './export/types';
import { Resource } from '@opentelemetry/resources';
import { Batcher } from './export/Batcher';
/** Options needed for SDK metric creation. */
export interface MetricOptions {
    /** The name of the component that reports the Metric. */
    component?: string;
    /** The description of the Metric. */
    description: string;
    /** The unit of the Metric values. */
    unit: string;
    /** The map of constant labels for the Metric. */
    constantLabels?: Map<string, string>;
    /** Indicates the metric is a verbose metric that is disabled by default. */
    disabled: boolean;
    /** (Measure only) Asserts that this metric will only accept non-negative values. */
    absolute: boolean;
    /** User provided logger. */
    logger: Logger;
    /** Indicates the type of the recorded value. */
    valueType: ValueType;
}
/** MeterConfig provides an interface for configuring a Meter. */
export interface MeterConfig {
    /** User provided logger. */
    logger?: Logger;
    /** level of logger. */
    logLevel?: LogLevel;
    /** Metric exporter. */
    exporter?: MetricExporter;
    /** Metric collect interval */
    interval?: number;
    /** Resource associated with metric telemetry */
    resource?: Resource;
    /** Metric batcher. */
    batcher?: Batcher;
}
/** Default Meter configuration. */
export declare const DEFAULT_CONFIG: {
    logLevel: LogLevel;
};
/** The default metric creation options value. */
export declare const DEFAULT_METRIC_OPTIONS: {
    disabled: boolean;
    absolute: boolean;
    description: string;
    unit: string;
    valueType: ValueType;
};
//# sourceMappingURL=types.d.ts.map